// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Passport_ParseJwt_FullMethodName = "/proto.Passport/ParseJwt"
)

// PassportClient is the client API for Passport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassportClient interface {
	ParseJwt(ctx context.Context, in *RequestParseJwt, opts ...grpc.CallOption) (*ParseJwtResult, error)
}

type passportClient struct {
	cc grpc.ClientConnInterface
}

func NewPassportClient(cc grpc.ClientConnInterface) PassportClient {
	return &passportClient{cc}
}

func (c *passportClient) ParseJwt(ctx context.Context, in *RequestParseJwt, opts ...grpc.CallOption) (*ParseJwtResult, error) {
	out := new(ParseJwtResult)
	err := c.cc.Invoke(ctx, Passport_ParseJwt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassportServer is the server API for Passport service.
// All implementations must embed UnimplementedPassportServer
// for forward compatibility
type PassportServer interface {
	ParseJwt(context.Context, *RequestParseJwt) (*ParseJwtResult, error)
	mustEmbedUnimplementedPassportServer()
}

// UnimplementedPassportServer must be embedded to have forward compatible implementations.
type UnimplementedPassportServer struct {
}

func (UnimplementedPassportServer) ParseJwt(context.Context, *RequestParseJwt) (*ParseJwtResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseJwt not implemented")
}
func (UnimplementedPassportServer) mustEmbedUnimplementedPassportServer() {}

// UnsafePassportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassportServer will
// result in compilation errors.
type UnsafePassportServer interface {
	mustEmbedUnimplementedPassportServer()
}

func RegisterPassportServer(s grpc.ServiceRegistrar, srv PassportServer) {
	s.RegisterService(&Passport_ServiceDesc, srv)
}

func _Passport_ParseJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParseJwt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).ParseJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_ParseJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).ParseJwt(ctx, req.(*RequestParseJwt))
	}
	return interceptor(ctx, in, info, handler)
}

// Passport_ServiceDesc is the grpc.ServiceDesc for Passport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Passport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Passport",
	HandlerType: (*PassportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseJwt",
			Handler:    _Passport_ParseJwt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
